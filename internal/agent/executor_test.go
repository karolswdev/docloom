package agent

import (
	"os"
	"path/filepath"
	"testing"

	"github.com/rs/zerolog"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

// TestAgentExecutor_RunCommand tests TC-20.1: Basic agent execution
func TestAgentExecutor_RunCommand(t *testing.T) {
	// Skip in CI/Docker environments where bash scripts won't work
	if os.Getenv("CI") == "true" {
		t.Skip("Skipping test in CI environment")
	}

	// Arrange: Create a test directory structure
	testDir := t.TempDir()

	// Create mock agent script
	mockAgentPath := filepath.Join(testDir, "mock-agent.sh")
	mockAgentScript := `#!/bin/bash
# Mock agent that demonstrates parameter passing and output generation
SOURCE_PATH="$1"
OUTPUT_PATH="$2"

echo "Mock agent running..."
echo "Source: $SOURCE_PATH"
echo "Output: $OUTPUT_PATH"

# Log parameters to a file for verification
echo "=== Parameters ===" > "$OUTPUT_PATH/agent.log"
echo "SOURCE_PATH=$SOURCE_PATH" >> "$OUTPUT_PATH/agent.log"
echo "OUTPUT_PATH=$OUTPUT_PATH" >> "$OUTPUT_PATH/agent.log"
env | grep "^PARAM_" | sort >> "$OUTPUT_PATH/agent.log"

# Create a mock analysis output
cat > "$OUTPUT_PATH/analysis.md" << 'EOF'
# Mock Analysis Report

This is a mock analysis generated by the test agent.

## Source Information
The agent was given a source path to analyze.

## Analysis Results
- File count: 10 (mock)
- Code quality: Good (mock)
- Test coverage: 80% (mock)
EOF

echo "Mock agent completed successfully"
exit 0
`
	err := os.WriteFile(mockAgentPath, []byte(mockAgentScript), 0755)
	require.NoError(t, err)

	// Create agent definition YAML
	agentDefPath := filepath.Join(testDir, "mock-agent.agent.yaml")
	agentDefYAML := `apiVersion: v1
kind: Agent
metadata:
  name: mock-agent
  description: Test agent for executor tests
spec:
  runner:
    command: ` + mockAgentPath + `
    args: []
  parameters:
    - name: debug
      type: boolean
      required: false
      default: false
      description: Enable debug mode
    - name: max_depth
      type: integer
      required: false
      default: 3
      description: Maximum depth for analysis
`
	err = os.WriteFile(agentDefPath, []byte(agentDefYAML), 0644)
	require.NoError(t, err)

	// Create source directory with test files
	sourceDir := filepath.Join(testDir, "source")
	err = os.MkdirAll(sourceDir, 0755)
	require.NoError(t, err)

	testFile := filepath.Join(sourceDir, "test.go")
	err = os.WriteFile(testFile, []byte("package main\n\nfunc main() {}\n"), 0644)
	require.NoError(t, err)

	// Create registry and discover the test agent
	registry := NewRegistry()
	registry.AddSearchPath(testDir)
	err = registry.Discover()
	require.NoError(t, err)

	// Create cache
	cache, err := NewArtifactCache()
	require.NoError(t, err)

	// Create executor
	logger := zerolog.New(os.Stderr).With().Timestamp().Logger()
	executor := NewExecutor(registry, cache, logger)

	// Act: Run the agent
	result, err := executor.Run(RunOptions{
		AgentName:  "mock-agent",
		SourcePath: sourceDir,
		Parameters: map[string]string{
			"debug": "true",
		},
	})

	// Assert
	require.NoError(t, err)
	assert.NotNil(t, result)
	assert.Equal(t, 0, result.ExitCode)
	assert.NotEmpty(t, result.OutputPath)

	// Verify output files were created
	analysisPath := filepath.Join(result.OutputPath, "analysis.md")
	assert.FileExists(t, analysisPath)

	content, err := os.ReadFile(analysisPath)
	require.NoError(t, err)
	assert.Contains(t, string(content), "Mock Analysis Report")

	// Verify agent log was created with correct paths
	logPath := filepath.Join(result.OutputPath, "agent.log")
	assert.FileExists(t, logPath)

	logContent, err := os.ReadFile(logPath)
	require.NoError(t, err)
	logStr := string(logContent)
	assert.Contains(t, logStr, "SOURCE_PATH="+sourceDir)
	assert.Contains(t, logStr, "OUTPUT_PATH="+result.OutputPath)
	assert.Contains(t, logStr, "PARAM_DEBUG=true")
	assert.Contains(t, logStr, "PARAM_MAX_DEPTH=3") // Default value
}

// TestAgentExecutor_ParameterOverrides tests TC-22.1: Parameter override functionality
func TestAgentExecutor_ParameterOverrides(t *testing.T) {
	// Skip in CI/Docker environments where bash scripts won't work
	if os.Getenv("CI") == "true" {
		t.Skip("Skipping test in CI environment")
	}

	// Arrange: Create test directory
	testDir := t.TempDir()

	// Create mock agent that echoes environment variables
	mockAgentPath := filepath.Join(testDir, "param-test-agent.sh")
	mockAgentScript := `#!/bin/bash
OUTPUT_PATH="$2"

# Echo all parameters to output file
echo "=== Environment Variables ===" > "$OUTPUT_PATH/params.log"
env | grep "^PARAM_" | sort >> "$OUTPUT_PATH/params.log"

# Create minimal output to satisfy validation
echo "# Parameter Test Output" > "$OUTPUT_PATH/output.md"
echo "Parameters logged to params.log" >> "$OUTPUT_PATH/output.md"

exit 0
`
	err := os.WriteFile(mockAgentPath, []byte(mockAgentScript), 0755)
	require.NoError(t, err)

	// Create agent definition with default parameters
	agentDefPath := filepath.Join(testDir, "param-test.agent.yaml")
	agentDefYAML := `apiVersion: v1
kind: Agent
metadata:
  name: param-test
  description: Agent for testing parameter overrides
spec:
  runner:
    command: ` + mockAgentPath + `
  parameters:
    - name: my_param
      type: string
      required: false
      default: default_value
      description: Test parameter
    - name: another_param
      type: integer
      required: false
      default: 42
      description: Another test parameter
    - name: bool_param
      type: boolean
      required: false
      default: false
      description: Boolean parameter
`
	err = os.WriteFile(agentDefPath, []byte(agentDefYAML), 0644)
	require.NoError(t, err)

	// Create source directory
	sourceDir := filepath.Join(testDir, "source")
	err = os.MkdirAll(sourceDir, 0755)
	require.NoError(t, err)

	// Set up registry, cache, and executor
	registry := NewRegistry()
	registry.AddSearchPath(testDir)
	err = registry.Discover()
	require.NoError(t, err)

	cache, err := NewArtifactCache()
	require.NoError(t, err)

	logger := zerolog.New(os.Stderr).With().Timestamp().Logger()
	executor := NewExecutor(registry, cache, logger)

	// Test case 1: Default values
	t.Run("DefaultValues", func(t *testing.T) {
		result, err := executor.Run(RunOptions{
			AgentName:  "param-test",
			SourcePath: sourceDir,
			Parameters: map[string]string{}, // No overrides
		})

		require.NoError(t, err)
		assert.Equal(t, 0, result.ExitCode)

		// Check parameter log
		paramsLog, err := os.ReadFile(filepath.Join(result.OutputPath, "params.log"))
		require.NoError(t, err)
		logStr := string(paramsLog)

		assert.Contains(t, logStr, "PARAM_MY_PARAM=default_value")
		assert.Contains(t, logStr, "PARAM_ANOTHER_PARAM=42")
		assert.Contains(t, logStr, "PARAM_BOOL_PARAM=false")
	})

	// Test case 2: Override single parameter
	t.Run("SingleOverride", func(t *testing.T) {
		result, err := executor.Run(RunOptions{
			AgentName:  "param-test",
			SourcePath: sourceDir,
			Parameters: map[string]string{
				"my_param": "overridden",
			},
		})

		require.NoError(t, err)
		assert.Equal(t, 0, result.ExitCode)

		// Check parameter log
		paramsLog, err := os.ReadFile(filepath.Join(result.OutputPath, "params.log"))
		require.NoError(t, err)
		logStr := string(paramsLog)

		assert.Contains(t, logStr, "PARAM_MY_PARAM=overridden")
		assert.Contains(t, logStr, "PARAM_ANOTHER_PARAM=42") // Still default
		assert.Contains(t, logStr, "PARAM_BOOL_PARAM=false") // Still default
	})

	// Test case 3: Override multiple parameters
	t.Run("MultipleOverrides", func(t *testing.T) {
		result, err := executor.Run(RunOptions{
			AgentName:  "param-test",
			SourcePath: sourceDir,
			Parameters: map[string]string{
				"my_param":      "overridden",
				"another_param": "100",
				"bool_param":    "true",
			},
		})

		require.NoError(t, err)
		assert.Equal(t, 0, result.ExitCode)

		// Check parameter log
		paramsLog, err := os.ReadFile(filepath.Join(result.OutputPath, "params.log"))
		require.NoError(t, err)
		logStr := string(paramsLog)

		assert.Contains(t, logStr, "PARAM_MY_PARAM=overridden")
		assert.Contains(t, logStr, "PARAM_ANOTHER_PARAM=100")
		assert.Contains(t, logStr, "PARAM_BOOL_PARAM=true")
	})
}

// TestAgentExecutor_ValidateOutput tests output validation
func TestAgentExecutor_ValidateOutput(t *testing.T) {
	logger := zerolog.New(os.Stderr).With().Timestamp().Logger()
	executor := &Executor{logger: logger}

	t.Run("ValidOutput", func(t *testing.T) {
		// Create temp directory with markdown file
		outputDir := t.TempDir()
		mdFile := filepath.Join(outputDir, "report.md")
		err := os.WriteFile(mdFile, []byte("# Test Report"), 0644)
		require.NoError(t, err)

		err = executor.ValidateOutput(outputDir)
		assert.NoError(t, err)
	})

	t.Run("NoMarkdownFiles", func(t *testing.T) {
		// Create temp directory with non-markdown file
		outputDir := t.TempDir()
		txtFile := filepath.Join(outputDir, "report.txt")
		err := os.WriteFile(txtFile, []byte("Test Report"), 0644)
		require.NoError(t, err)

		err = executor.ValidateOutput(outputDir)
		assert.Error(t, err)
		assert.Contains(t, err.Error(), "did not produce any markdown files")
	})

	t.Run("EmptyOutput", func(t *testing.T) {
		// Create empty temp directory
		outputDir := t.TempDir()

		err := executor.ValidateOutput(outputDir)
		assert.Error(t, err)
		assert.Contains(t, err.Error(), "produced no output files")
	})
}
