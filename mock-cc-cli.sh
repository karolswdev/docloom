#!/bin/bash

# Mock Claude Code CLI (cc-cli) Script
# This script simulates the behavior of the Claude Code CLI tool
# by creating the expected directory structure and files with placeholder content.
# It follows the Artifact Specification defined in docs/agents/artifact-spec-claude-code.md

set -e

# Default values
SOURCE=""
OUTPUT=""
LANGUAGE="csharp"
DEPTH=2
INCLUDE_TESTS=false
TIMEOUT=300

# Parse command-line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --source)
            SOURCE="$2"
            shift 2
            ;;
        --output)
            OUTPUT="$2"
            shift 2
            ;;
        --language)
            LANGUAGE="$2"
            shift 2
            ;;
        --depth)
            DEPTH="$2"
            shift 2
            ;;
        --include-tests)
            INCLUDE_TESTS="$2"
            shift 2
            ;;
        --timeout)
            TIMEOUT="$2"
            shift 2
            ;;
        *)
            echo "Unknown option: $1" >&2
            exit 1
            ;;
    esac
done

# Validate required parameters
if [ -z "$SOURCE" ]; then
    echo "Error: --source parameter is required" >&2
    exit 1
fi

if [ -z "$OUTPUT" ]; then
    echo "Error: --output parameter is required" >&2
    exit 1
fi

# Check if source exists
if [ ! -d "$SOURCE" ]; then
    echo "Error: Source directory does not exist: $SOURCE" >&2
    exit 1
fi

# Create output directory structure
mkdir -p "$OUTPUT"
mkdir -p "$OUTPUT/insights"
mkdir -p "$OUTPUT/raw"

# Generate timestamp
TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

# Create overview.md
cat > "$OUTPUT/overview.md" << EOF
# Project Overview

## Summary
MOCK_PLACEHOLDER: This is a mock analysis generated by the mock Claude Code CLI script.
The project appears to be a sophisticated code analysis system with multiple components.

## Technology Stack
- **Primary Language:** $LANGUAGE
- **Frameworks:** ASP.NET Core, Entity Framework
- **Build System:** MSBuild / .NET SDK

## Project Statistics
- **Total Files:** 150
- **Lines of Code:** 25000
- **Test Coverage:** 85%

## Key Components
- Core.Analysis
- Services.Processing
- Data.Repositories
- Web.Controllers

## Generated
Generated by Claude Code CLI v1.0.0-mock on $TIMESTAMP
EOF

# Create structure.json
cat > "$OUTPUT/structure.json" << EOF
{
  "version": "1.0",
  "root": {
    "name": "MockProject",
    "type": "project",
    "path": ".",
    "children": [
      {
        "name": "Core",
        "type": "namespace",
        "path": "src/Core",
        "children": [
          {
            "name": "AnalysisEngine",
            "type": "class",
            "path": "src/Core/AnalysisEngine.cs",
            "members": [
              {
                "name": "Analyze",
                "type": "method",
                "visibility": "public",
                "signature": "Task<Result> Analyze(Request request)"
              },
              {
                "name": "MOCK_PLACEHOLDER_METHOD",
                "type": "method",
                "visibility": "public",
                "signature": "string GetMockData()"
              }
            ]
          }
        ]
      },
      {
        "name": "Services",
        "type": "namespace",
        "path": "src/Services",
        "children": [
          {
            "name": "ProcessingService",
            "type": "class",
            "path": "src/Services/ProcessingService.cs",
            "members": [
              {
                "name": "Process",
                "type": "method",
                "visibility": "public",
                "signature": "void Process(Data data)"
              }
            ]
          }
        ]
      }
    ]
  }
}
EOF

# Create dependencies.json
cat > "$OUTPUT/dependencies.json" << EOF
{
  "version": "1.0",
  "internal": [
    {
      "from": "Core.Analysis",
      "to": "Services.Processing",
      "type": "uses",
      "count": 15
    },
    {
      "from": "Services.Processing",
      "to": "Data.Repositories",
      "type": "uses",
      "count": 23
    },
    {
      "from": "MOCK_PLACEHOLDER_NS",
      "to": "MockDependency",
      "type": "uses",
      "count": 5
    }
  ],
  "external": [
    {
      "package": "Newtonsoft.Json",
      "version": "13.0.1",
      "usages": 42
    },
    {
      "package": "Microsoft.Extensions.DependencyInjection",
      "version": "7.0.0",
      "usages": 18
    }
  ],
  "circular": []
}
EOF

# Create complexity.json
cat > "$OUTPUT/complexity.json" << EOF
{
  "version": "1.0",
  "summary": {
    "average_cyclomatic": 3.2,
    "max_cyclomatic": 15,
    "average_depth": 2.1,
    "max_depth": 5,
    "MOCK_PLACEHOLDER_METRIC": 42
  },
  "hotspots": [
    {
      "file": "src/Complex/Calculator.cs",
      "method": "Calculate",
      "cyclomatic": 15,
      "lines": 250,
      "maintainability_index": 45
    },
    {
      "file": "src/MockFile.cs",
      "method": "MOCK_PLACEHOLDER_METHOD",
      "cyclomatic": 8,
      "lines": 100,
      "maintainability_index": 65
    }
  ]
}
EOF

# Create api-surface.json
cat > "$OUTPUT/api-surface.json" << EOF
{
  "version": "1.0",
  "endpoints": [
    {
      "type": "class",
      "name": "PublicService",
      "namespace": "MyApp.Services",
      "visibility": "public",
      "methods": [
        {
          "name": "ProcessData",
          "signature": "Task<Result> ProcessData(Request request)",
          "description": "Processes incoming data requests",
          "parameters": [
            {
              "name": "request",
              "type": "Request",
              "required": true
            }
          ],
          "returns": "Task<Result>"
        },
        {
          "name": "MOCK_PLACEHOLDER_API",
          "signature": "string GetMockEndpoint()",
          "description": "Mock endpoint for testing",
          "parameters": [],
          "returns": "string"
        }
      ]
    }
  ]
}
EOF

# Create insights/patterns.md
cat > "$OUTPUT/insights/patterns.md" << EOF
# Detected Design Patterns

## Repository Pattern
- **Location:** \`src/Data/Repositories/\`
- **Classes:** UserRepository, ProductRepository
- **Confidence:** High

## Factory Pattern
- **Location:** \`src/Services/Factories/\`
- **Classes:** ServiceFactory
- **Confidence:** Medium

## MOCK_PLACEHOLDER Pattern
- **Location:** \`src/Mock/\`
- **Classes:** MockPattern
- **Confidence:** High

Generated on $TIMESTAMP
EOF

# Create insights/anti-patterns.md
cat > "$OUTPUT/insights/anti-patterns.md" << EOF
# Detected Anti-Patterns

## God Class
- **Class:** \`src/Core/ApplicationManager.cs\`
- **Issues:** 2500+ lines, 45 public methods
- **Recommendation:** Consider splitting into smaller, focused classes

## Shotgun Surgery
- **Pattern:** Changes to logging require updates in 15+ files
- **Recommendation:** Centralize logging configuration

## MOCK_PLACEHOLDER Anti-Pattern
- **Class:** \`src/Mock/BadPattern.cs\`
- **Issues:** This is a mock anti-pattern for testing
- **Recommendation:** Refactor mock code

Generated on $TIMESTAMP
EOF

# Create insights/recommendations.md
cat > "$OUTPUT/insights/recommendations.md" << EOF
# Recommendations

## High Priority
1. **Reduce Cyclomatic Complexity**
   - File: \`src/Complex/Calculator.cs\`
   - Current: 15, Target: <10
   - Consider extracting methods or using strategy pattern

2. **Address Circular Dependencies**
   - Components: Data â†” Services
   - Consider introducing interfaces or mediator pattern

## Medium Priority
3. **MOCK_PLACEHOLDER Recommendation**
   - File: \`src/Mock/TestFile.cs\`
   - Issue: Mock issue for testing
   - Solution: Apply mock solution

## Low Priority
4. **Improve Test Coverage**
   - Current: 85%, Target: 90%
   - Focus on edge cases in Core namespace

Generated on $TIMESTAMP
EOF

# Create raw/file-list.txt
cat > "$OUTPUT/raw/file-list.txt" << EOF
src/Program.cs
src/Core/ApplicationManager.cs
src/Core/AnalysisEngine.cs
src/Data/Repositories/UserRepository.cs
src/Data/Repositories/ProductRepository.cs
src/Services/ProcessingService.cs
src/Services/Factories/ServiceFactory.cs
src/Mock/MOCK_PLACEHOLDER_FILE.cs
src/Web/Controllers/ApiController.cs
src/Web/Controllers/HomeController.cs
tests/Core.Tests/AnalysisEngineTests.cs
tests/Services.Tests/ProcessingServiceTests.cs
EOF

# Create raw/stats.json
cat > "$OUTPUT/raw/stats.json" << EOF
{
  "version": "1.0",
  "timestamp": "$TIMESTAMP",
  "files_analyzed": 150,
  "total_lines": 25000,
  "code_lines": 18000,
  "comment_lines": 3000,
  "blank_lines": 4000,
  "MOCK_PLACEHOLDER_STAT": 999,
  "language_breakdown": {
    "$LANGUAGE": 140,
    "json": 8,
    "xml": 2
  },
  "depth_level": $DEPTH,
  "include_tests": $INCLUDE_TESTS
}
EOF

echo "Mock Claude Code CLI analysis complete!"
echo "Output written to: $OUTPUT"
echo "Analysis depth: $DEPTH"
echo "Language: $LANGUAGE"
echo "Include tests: $INCLUDE_TESTS"

exit 0